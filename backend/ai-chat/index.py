import json
import os
import sys
from typing import Dict, Any

if sys.stdout.encoding != 'utf-8':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: AI chat assistant for student work adaptation
    Args: event with httpMethod, body containing messages array
    Returns: HTTP response with AI assistant reply
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body = event.get('body') or '{}'
        body_data = json.loads(body) if body else {}
        messages = body_data.get('messages', [])
        file_content = body_data.get('file_content', '')
        
        if not messages:
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': 'Messages array is required'})
            }
        
        openai_api_key = os.environ.get('OPENAI_API_KEY', '')
        
        if not openai_api_key:
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': 'OpenAI API key not configured'})
            }
        
        import openai
        
        client = openai.OpenAI(api_key=openai_api_key)
        
        system_prompt = """–¢—ã ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏—Ö –í–£–ó–∞.

–í–ê–ñ–ù–û: –¢—ã –ù–ï –ø–∏—à–µ—à—å —Ä–∞–±–æ—Ç—É –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞! –¢—ã —É—á–∏—à—å –µ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–±–æ—Ç—ã –∏ –æ–±—ä—è—Å–Ω—è—Ç—å –µ—ë
2. –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å, –ö–ê–ö –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞)
3. –ù–∞–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ—à–∞–≥–æ–≤–æ
4. –£—á–∏—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
5. –ó–∞–¥–∞–≤–∞—Ç—å –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫–∞–∫ —É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ üìö
- –ü–æ–æ—â—Ä—è–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É

–ó–∞–ø—Ä–µ—â–µ–Ω–æ:
- –ü–∏—Å–∞—Ç—å —Ü–µ–ª—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Ä–∞–±–æ—Ç—ã
- –î–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
- –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫—É—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞

–†–∞–∑—Ä–µ—à–µ–Ω–æ:
- –û–±—ä—è—Å–Ω—è—Ç—å –∫–∞–∫ –¥–µ–ª–∞—Ç—å
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
- –î–∞–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–µ–π—Å—Ç–≤–∏–π
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"""

        api_messages = [
            {'role': 'system', 'content': system_prompt}
        ]
        
        for msg in messages:
            role = msg.get('role', 'user')
            content = msg.get('content', '')
            if role in ['user', 'assistant']:
                api_messages.append({'role': role, 'content': content})
        
        if file_content:
            last_user_msg = api_messages[-1] if api_messages[-1]['role'] == 'user' else None
            if last_user_msg:
                last_user_msg['content'] += f"\n\n=== –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê ===\n{file_content[:15000]}\n=== –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ==="
        
        response = client.chat.completions.create(
            model='gpt-4o-mini',
            messages=api_messages,
            temperature=0.7,
            max_tokens=800
        )
        
        assistant_message = response.choices[0].message.content
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({
                'message': assistant_message,
                'usage': {
                    'prompt_tokens': response.usage.prompt_tokens,
                    'completion_tokens': response.usage.completion_tokens,
                    'total_tokens': response.usage.total_tokens
                }
            })
        }
        
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Invalid JSON in request body'})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': str(e)})
        }