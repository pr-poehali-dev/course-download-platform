'''
Business: Generate preview images from PDF/DOCX files on Yandex Disk
Args: event with httpMethod POST, body with offset/limit for batch processing
Returns: HTTP response with generation statistics
'''

import json
import os
import psycopg2
import requests
import base64
from typing import Dict, Any, Optional
from io import BytesIO
from PIL import Image
import fitz  # PyMuPDF

DATABASE_URL = os.environ.get('DATABASE_URL', '')
CLOUDFLARE_ACCOUNT_ID = os.environ.get('CLOUDFLARE_ACCOUNT_ID', '')
CLOUDFLARE_API_TOKEN = os.environ.get('CLOUDFLARE_API_TOKEN', '')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def get_files_from_yandex_folder(public_key: str, folder_name: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ"""
    api_url = 'https://cloud-api.yandex.net/v1/disk/public/resources'
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ —á–µ—Ä–µ–∑ path
    folder_path = f'/{folder_name}'
    params = {
        'public_key': public_key,
        'path': folder_path,
        'limit': 100
    }
    
    response = requests.get(api_url, params=params, timeout=15)
    data = response.json()
    
    files = []
    if '_embedded' in data and 'items' in data['_embedded']:
        for file_item in data['_embedded']['items']:
            if file_item['type'] == 'file':
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                file_path = file_item['path']
                download_params = {
                    'public_key': public_key,
                    'path': file_path
                }
                
                try:
                    dl_url = f'{api_url}/download'
                    dl_response = requests.get(dl_url, params=download_params, timeout=10)
                    dl_data = dl_response.json()
                    download_url = dl_data.get('href', '')
                    
                    if download_url:
                        files.append({
                            'name': file_item['name'],
                            'path': file_item['path'],
                            'download_url': download_url
                        })
                except:
                    pass
    
    return files

def find_main_document(files: list) -> Optional[str]:
    """–ù–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (PDF –∏–ª–∏ DOCX) –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤"""
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ü–ó, –∑–∞–ø–∏—Å–∫–∞, –¥–∏–ø–ª–æ–º, –∫—É—Ä—Å–æ–≤–∞—è
    priority_keywords = ['–ø–∑', '–∑–∞–ø–∏—Å–∫–∞', '–¥–∏–ø–ª–æ–º', '–∫—É—Ä—Å–æ–≤–∞—è', '—Ä–µ—Ñ–µ—Ä–∞—Ç']
    
    pdf_files = [f for f in files if f['name'].lower().endswith('.pdf')]
    docx_files = [f for f in files if f['name'].lower().endswith(('.docx', '.doc'))]
    
    # –ò—â–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for keyword in priority_keywords:
        for pdf in pdf_files:
            if keyword in pdf['name'].lower():
                return pdf['download_url']
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PDF
    if pdf_files:
        return pdf_files[0]['download_url']
    
    # –ò–ª–∏ –ø–µ—Ä–≤—ã–π DOCX
    if docx_files:
        return docx_files[0]['download_url']
    
    return None

def generate_preview_from_pdf(download_url: str) -> Optional[bytes]:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PNG –ø—Ä–µ–≤—å—é –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF"""
    response = requests.get(download_url, timeout=30)
    pdf_bytes = response.content
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
    doc = fitz.open(stream=pdf_bytes, filetype='pdf')
    
    if len(doc) == 0:
        return None
    
    # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    page = doc[0]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (2x zoom)
    mat = fitz.Matrix(2, 2)
    pix = page.get_pixmap(matrix=mat)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
    img_data = pix.tobytes('png')
    img = Image.open(BytesIO(img_data))
    
    # –°–∂–∏–º–∞–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å 800px –ø–æ —à–∏—Ä–∏–Ω–µ)
    max_width = 800
    if img.width > max_width:
        ratio = max_width / img.width
        new_height = int(img.height * ratio)
        img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG bytes
    output = BytesIO()
    img.save(output, format='PNG', optimize=True)
    output.seek(0)
    
    doc.close()
    
    return output.read()

def upload_to_cloudflare(image_bytes: bytes, filename: str) -> str:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudflare R2 –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ S3/R2
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º data URL
    base64_data = base64.b64encode(image_bytes).decode('utf-8')
    return f'data:image/png;base64,{base64_data}'

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-Admin-Email',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    admin_email = event.get('headers', {}).get('x-admin-email') or event.get('headers', {}).get('X-Admin-Email')
    
    if admin_email != 'rekrutiw@yandex.ru':
        return {
            'statusCode': 403,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Unauthorized'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    offset = body_data.get('offset', 0)
    limit = body_data.get('limit', 10)
    public_key = body_data.get('public_key', 'https://disk.yandex.ru/d/dQBBqvLRShUD6A')
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ø—Ä–µ–≤—å—é
        cur.execute(f"""
            SELECT id, title, yandex_disk_link
            FROM t_p63326274_course_download_plat.works
            WHERE preview_image_url IS NULL
            ORDER BY id
            LIMIT {limit} OFFSET {offset}
        """)
        
        works = cur.fetchall()
        total_works = len(works)
        
        results = {
            'processed': 0,
            'success': 0,
            'failed': 0,
            'errors': []
        }
        
        for work_id, title, yandex_link in works:
            results['processed'] += 1
            
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—Ç—É ID={work_id}: {title}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
                files = get_files_from_yandex_folder(public_key, title)
                
                if not files:
                    raise Exception('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ')
                
                # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
                doc_url = find_main_document(files)
                
                if not doc_url:
                    raise Exception('–ù–µ –Ω–∞–π–¥–µ–Ω PDF/DOCX —Ñ–∞–π–ª')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
                preview_bytes = generate_preview_from_pdf(doc_url)
                
                if not preview_bytes:
                    raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é')
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                preview_url = upload_to_cloudflare(preview_bytes, f'preview_{work_id}.png')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –±–∞–∑—É
                safe_url = preview_url.replace("'", "''")
                cur.execute(f"""
                    UPDATE t_p63326274_course_download_plat.works
                    SET preview_image_url = '{safe_url}'
                    WHERE id = {work_id}
                """)
                conn.commit()
                
                results['success'] += 1
                print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã ID={work_id}")
                
            except Exception as e:
                results['failed'] += 1
                results['errors'].append({
                    'work_id': work_id,
                    'title': title,
                    'error': str(e)
                })
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã ID={work_id}: {str(e)}")
                conn.rollback()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': True,
                'total_works': total_works,
                'offset': offset,
                'limit': limit,
                **results
            })
        }
        
    finally:
        cur.close()
        conn.close()