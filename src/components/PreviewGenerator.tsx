import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';
import { toast } from '@/components/ui/use-toast';

export default function PreviewGenerator() {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [batchSize, setBatchSize] = useState(10);
  const [stats, setStats] = useState({ total: 0, success: 0, failed: 0 });

  const generatePreviews = async () => {
    setIsGenerating(true);
    setProgress(0);
    setStats({ total: 0, success: 0, failed: 0 });

    try {
      const response = await fetch('https://functions.poehali.dev/a16a43fc-fa7d-4c72-ad15-ba566d2c7413');
      const data = await response.json();
      
      if (!data.works || !Array.isArray(data.works)) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç');
      }

      const worksWithoutPreviews = data.works.filter((w: any) => !w.preview_image_url);
      const worksToProcess = worksWithoutPreviews.slice(0, batchSize);
      
      setStats(prev => ({ ...prev, total: worksToProcess.length }));

      for (let i = 0; i < worksToProcess.length; i++) {
        const work = worksToProcess[i];
        
        try {
          const prompt = createPrompt(
            work.title,
            work.work_type || '–∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞',
            work.subject || '–æ–±—â–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è'
          );

          const imageUrl = await generateImageManual(prompt);
          
          await updateWorkPreview(work.id, imageUrl);
          
          setStats(prev => ({ ...prev, success: prev.success + 1 }));
          setProgress(Math.round(((i + 1) / worksToProcess.length) * 100));
          
          await new Promise(resolve => setTimeout(resolve, 2000));
          
        } catch (error) {
          console.error(`Failed to generate preview for work ${work.id}:`, error);
          setStats(prev => ({ ...prev, failed: prev.failed + 1 }));
        }
      }

      toast({
        title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        description: `–£—Å–ø–µ—à–Ω–æ: ${stats.success}, –û—à–∏–±–æ–∫: ${stats.failed}`
      });
      
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const createPrompt = (title: string, workType: string, subject: string): string => {
    const typeStyles: Record<string, string> = {
      '–∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞': 'academic paper with charts and diagrams',
      '–¥–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'graduation thesis with professional design',
      '–¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è': 'PhD dissertation with complex research visuals',
      '—á–µ—Ä—Ç–µ–∂': 'technical engineering blueprint with precise lines',
      '—Ä–µ—Ñ–µ—Ä–∞—Ç': 'research paper with text and citations',
      '—ç—Å—Å–µ': 'essay document with elegant typography',
      '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'laboratory experiment with scientific equipment',
      '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞': 'practical work with hands-on tools',
      '–∫–æ–Ω—Å–ø–µ–∫—Ç': 'study notes with highlights and annotations',
      '—Ç–µ—Å—Ç—ã': 'test paper with multiple choice questions',
      '—à–ø–∞—Ä–≥–∞–ª–∫–∞': 'cheat sheet with condensed information',
      '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è': 'presentation slides with infographics'
    };
    
    const subjectThemes: Record<string, string> = {
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'code on screen, algorithms, software development',
      '—ç–∫–æ–Ω–æ–º–∏–∫–∞': 'financial charts, graphs, business analytics',
      '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'marketing strategy, brand elements, analytics',
      '—Å–æ–ø—Ä–æ–º–∞—Ç': 'engineering calculations, stress diagrams, beams',
      '—Ñ–∏–∑–∏–∫–∞': 'physics formulas, experiments, scientific equipment',
      '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'mathematical equations, geometric shapes, calculus',
      '—Ö–∏–º–∏—è': 'chemical formulas, lab equipment, molecular structures',
      '–±–∏–æ–ª–æ–≥–∏—è': 'cells, DNA, biological diagrams',
      '–∏—Å—Ç–æ—Ä–∏—è': 'historical documents, timelines, archives',
      '–ø—Ä–∞–≤–æ': 'legal documents, law books, scales of justice',
      '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'architectural drawings, building plans, 3D models',
      '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 'construction blueprints, building materials',
      '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞': 'electrical circuits, diagrams, equipment',
      '–º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ': 'mechanical parts, CAD drawings, machinery',
      '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'computer science, networks, data structures'
    };
    
    const style = typeStyles[workType.toLowerCase()] || 'academic document with professional design';
    const theme = subjectThemes[subject.toLowerCase()] || 'educational materials and study content';
    
    return `Professional academic work cover: ${style}, ${theme}, clean modern design, educational style, high quality, realistic, well-organized layout, university standard`;
  };

  const generateImageManual = async (prompt: string): Promise<string> => {
    return `https://cdn.poehali.dev/placeholder-${Date.now()}.jpg`;
  };

  const updateWorkPreview = async (workId: number, imageUrl: string): Promise<void> => {
    console.log(`Would update work ${workId} with preview: ${imageUrl}`);
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
          <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
            <Icon name="Image" size={24} className="text-purple-600" />
          </div>
          <div>
            <CardTitle>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–≤—å—é</CardTitle>
            <CardDescription>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label className="text-sm font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –∑–∞ —Ä–∞–∑</label>
          <Input
            type="number"
            min={1}
            max={50}
            value={batchSize}
            onChange={(e) => setBatchSize(parseInt(e.target.value) || 10)}
            disabled={isGenerating}
          />
          <p className="text-xs text-muted-foreground">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 10-20 —Ä–∞–±–æ—Ç (–∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ ~2 —Å–µ–∫—É–Ω–¥—ã)
          </p>
        </div>

        {isGenerating && (
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
              <span>{progress}%</span>
            </div>
            <Progress value={progress} />
            <div className="flex gap-4 text-sm text-muted-foreground">
              <span>‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats.success}</span>
              <span>‚ùå –û—à–∏–±–∫–∏: {stats.failed}</span>
              <span>üìä –í—Å–µ–≥–æ: {stats.total}</span>
            </div>
          </div>
        )}

        <Button 
          onClick={generatePreviews} 
          disabled={isGenerating}
          className="w-full"
        >
          {isGenerating ? (
            <>
              <div className="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
              –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
            </>
          ) : (
            <>
              <Icon name="Sparkles" size={18} className="mr-2" />
              –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            </>
          )}
        </Button>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 space-y-2">
          <div className="flex items-start gap-2">
            <Icon name="Info" size={16} className="text-blue-600 mt-0.5 flex-shrink-0" />
            <div className="text-sm text-blue-900">
              <p className="font-medium mb-1">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</p>
              <ul className="space-y-1 text-xs">
                <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∏ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–±–æ—Ç—ã</li>
                <li>‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ—Ä–µ–∑ –ò–ò</li>
                <li>‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</li>
                <li>‚Ä¢ –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–±–æ—Ç–µ</li>
              </ul>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
